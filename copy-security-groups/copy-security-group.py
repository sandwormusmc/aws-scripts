#!/usr/bin/python

import getopt, json, os, re, subprocess, sys
from pprint import pprint

def makesg(profile, sgid, vpcid, shell, count):
    cmd = [ 'aws', 'ec2', 'describe-security-groups', '--group-id=%s' % sgid, 
                          '--output=json', ]
    if profile:
        cmd.append('--profile')
        cmd.append(profile)
    ap = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    rc = ap.wait()
    if (rc != 0):
        print "Error in aws describe security group"
        for ln in ap.stdout.readlines():
            print ln,
        sys.exit(rc)

    data = json.load(ap.stdout)
    # pprint(data)
    if not data.has_key('SecurityGroups'):
        print "Internal error: no SecurityGroups key in data"
        sys.exit(3)
    sg1 = data['SecurityGroups'][0]
    groupId = sg1['GroupId']
    groupName = sg1['GroupName']
    groupDesc = sg1['Description']
    # these are dumped to stderr so the user can redirect only stdout to a shell script
    sys.stderr.write("Working on SG #"+str(count)+"\n")
    sys.stderr.write("\tID: " + groupId + "\n")
    sys.stderr.write("\tDescription: " + groupDesc + "\n")

    # Sanity check
    for ipp in sg1['IpPermissions']:
        if not ipp.has_key('FromPort'):   continue
        if not ipp.has_key('IpProtocol'): continue
        if not ipp.has_key('IpRanges'):   continue
        if not ipp.has_key('ToPort'):     continue
        if len(ipp['UserIdGroupPairs']) > 0:
            sys.stderr.write("Warning: ignoring User Id info\n")
        for ipr in ipp['IpRanges']:
            for k in ipr.keys():
                if k != 'CidrIp':
                    sys.stderr.write("Error: Don't know how to handle ")
                    sys.stderr.write("key %s in IpRanges\n" % (k))
                    #sys.exit(4)
        # if ipp['IpProtocol'] != 'icmp' and ipp['ToPort'] != ipp['FromPort']:
    for ipp in sg1['IpPermissionsEgress']:
        if not ipp.has_key('FromPort'):   continue
        if not ipp.has_key('IpProtocol'): continue
        if not ipp.has_key('IpRanges'):   continue
        if not ipp.has_key('ToPort'):     continue
        if len(ipp['UserIdGroupPairs']) > 0:
            sys.stderr.write("Warning: ignoring User Id info\n")
        for ipr in ipp['IpRanges']:
            for k in ipr.keys():
                if k != 'CidrIp':
                    sys.stderr.write("Error: Don't know how to handle")
                    sys.stderr.write("key %s in IpRanges\n" % (k))
                    sys.exit(4)

    cmd = [ 'aws', 'ec2', 'create-security-group' ]
    if profile:
        cmd.append('--profile')
        cmd.append(profile)
    if vpcid:
        vpcopt = "--vpc-id=%s" % (vpcid)
    else:
        vpcopt = ''

    if shell:
        print "### Commands auto-generated by the copysg.py script"
        print "### Original work by Abdul M Gill on March 1, 2016 @ https://cloudarchitect.net/articles/45"
	print "### Modified by Matt Moldvan on December 6, 2018 @ https://github.com/sandwormusmc/aws-scripts for kicks"
        print ""

    if shell:
        print "sgout=(`%s %s --group-name='%s' --description='%s' --output table`)" % (
               " ".join(cmd), vpcopt,       groupName,       groupDesc)
        print 'if [ $? != 0 ]; then'
        print '   echo "Error: %s failed"' % (" ".join(cmd))
        print '   exit 1'
        print 'fi'
        print 'if [ "${sgout[6]}" != \'GroupId\' ]; then'
        print '   echo "Error: expected \'GroupId\', got ${sgout[6]}"'
        print '   exit 1'
        print 'fi'
        print 'SGID=${sgout[8]}'
    else:
        print "%s %s --group-name='%s' --description='%s'" % (
               " ".join(cmd), vpcopt,       groupName,       groupDesc)

    for ipp in sg1['IpPermissions']:
        if not ipp.has_key('FromPort'):   continue
        if not ipp.has_key('IpProtocol'): continue
        if not ipp.has_key('IpRanges'):   continue
        if not ipp.has_key('ToPort'):     continue
        for ipr in ipp['IpRanges']:
            cidr = ipr['CidrIp']

            cmd = [ 'aws', 'ec2', 'authorize-security-group-ingress' ]
	    if profile:
		cmd.append('--profile')
		cmd.append(profile)
            if shell:
                print "%s --group-id=$SGID --protocol='%s'" % (
                                           " ".join(cmd), ipp['IpProtocol']),
            else:
                print "%s --group-id=PUT_SG_ID_HERE --protocol='%s'" % (
                                           " ".join(cmd), ipp['IpProtocol']),
            if ipp['ToPort'] < 0:
                # ICMP ToPort was -1 ???
                ipp['ToPort'] = ipp['FromPort']
            if ipp['FromPort'] != ipp['ToPort']:
                print "--port=%s-%s" % (ipp['FromPort'], ipp['ToPort']),
            else:
                print "--port=%s" % (ipp['FromPort']),
            print "--cidr=%s" % (ipr['CidrIp'])
            if shell:
                print 'if [ $? != 0 ]; then'
                print '   echo "Error: %s failed"' % (" ".join(cmd))
                print '   exit 1'
                print 'fi'

    print " "

    for ipp in sg1['IpPermissionsEgress']:
        if not ipp.has_key('FromPort'):   continue
        if not ipp.has_key('IpProtocol'): continue
        if not ipp.has_key('IpRanges'):   continue
        if not ipp.has_key('ToPort'):     continue
        for ipr in ipp['IpRanges']:
            cidr = ipr['CidrIp']

            cmd = [ 'aws', 'ec2', 'authorize-security-group-egress' ]
	    if profile:
		cmd.append('--profile')
		cmd.append(profile)
            if shell:
                print "%s --group-id=$SGID --protocol='%s'" % (
                                           " ".join(cmd), ipp['IpProtocol']),
            else:
                print "%s --group-id=PUT_SG_ID_HERE --protocol='%s'" % (
                                           " ".join(cmd), ipp['IpProtocol']),
            if ipp['ToPort'] < 0:
                # ICMP ToPort was -1 ???
                ipp['ToPort'] = ipp['FromPort']
            if ipp['FromPort'] != ipp['ToPort']:
                print "--port=%s-%s" % (ipp['FromPort'], ipp['ToPort']),
            else:
                print "--port=%s" % (ipp['FromPort']),
            print "--cidr=%s" % (ipr['CidrIp'])
            if shell:
                print 'if [ $? != 0 ]; then'
                print '   echo "Error: %s failed"' % (" ".join(cmd))
                print '   exit 1'
                print 'fi'

    if sg1.has_key('Tags'):
        for tag in sg1['Tags']:
            if tag.has_key('Key') and tag['Key'] == 'Name':
                if shell:
                    print "aws ec2 create-tags --resources $SGID",
                    print '--tags "Key=Name,Value=%s"' % (tag['Value'])
                else:
                    print "aws ec2 create-tags --resources PUT_SG_ID_HERE",
                    print '--tags "Key=Name,Value=%s"' % (tag['Value'])




###############################  MAIN  #######################################


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hp:sv:g:", 
                                       [ "help", "profile=", "shell", "vpc=", "sgids=", ])
    except getopt.GetoptError:
        usage()
        sys.exit(2)
    
    sgs=[]
    profile = None
    vpcid = None
    shell = False
    for o,a in opts:
        if o in ("-h", "--help"):
            usage()
            return
        elif o in ("-p", "--profile"):
            profile = a
        elif o in ("-s", "--shell"):
            shell = True
        elif o in ("-v", "--vpc"):
            vpcid = a
        elif o in ("-v", "--vpc"):
            vpcid = a
        elif o in ("-g", "--sgids"):
            print a.split(",")
            sgid = a.split(",")
                   
    print sgid
    if len(args) == 1 and not sgid:
        sgid = args[0]
    else:
        print "ERROR: You must give a security group id"
        usage()
        sys.exit(1)

    count=0
    count+=1
    print sgid
    sys.exit()
    makesg(profile, sgid, vpcid, shell, count)


def usage():
    print "copysg.py [-h] [--profile=alt_profile] [--shell] [--vpc=vpc_id]",
    print "sg_id"
    print "    -h - help"
    print "    --profile (or -p) - use alternate aws cli profile"
    print "    --shell (or -s)   - wrap commands in shell syntax to capture id"
    print "    --vpc (or -v)     - specify destination vpc for new SG"

if __name__ == "__main__":
    main()
